/* Auto-generated by genmsg_cpp for file /home/masaru/fuerte_workspace/sandbox/usarsim/usarsim_inf/msg/ToolType.msg */
#ifndef USARSIM_INF_MESSAGE_TOOLTYPE_H
#define USARSIM_INF_MESSAGE_TOOLTYPE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace usarsim_inf
{
template <class ContainerAllocator>
struct ToolType_ {
  typedef ToolType_<ContainerAllocator> Type;

  ToolType_()
  : type(0)
  {
  }

  ToolType_(const ContainerAllocator& _alloc)
  : type(0)
  {
  }

  typedef uint8_t _type_type;
  uint8_t type;

  enum { UNKNOWN = 0 };
  enum { GRIPPER = 1 };
  enum { VACUUM = 2 };
  enum { TOOLCHANGER = 3 };

  typedef boost::shared_ptr< ::usarsim_inf::ToolType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::usarsim_inf::ToolType_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ToolType
typedef  ::usarsim_inf::ToolType_<std::allocator<void> > ToolType;

typedef boost::shared_ptr< ::usarsim_inf::ToolType> ToolTypePtr;
typedef boost::shared_ptr< ::usarsim_inf::ToolType const> ToolTypeConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::usarsim_inf::ToolType_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::usarsim_inf::ToolType_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace usarsim_inf

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::usarsim_inf::ToolType_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::usarsim_inf::ToolType_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::usarsim_inf::ToolType_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9d49e02052e33b674525426c5e7bd1f6";
  }

  static const char* value(const  ::usarsim_inf::ToolType_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9d49e02052e33b67ULL;
  static const uint64_t static_value2 = 0x4525426c5e7bd1f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::usarsim_inf::ToolType_<ContainerAllocator> > {
  static const char* value() 
  {
    return "usarsim_inf/ToolType";
  }

  static const char* value(const  ::usarsim_inf::ToolType_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::usarsim_inf::ToolType_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 type\n\
uint8 UNKNOWN=0\n\
uint8 GRIPPER=1\n\
uint8 VACUUM=2\n\
uint8 TOOLCHANGER=3\n\
\n\
";
  }

  static const char* value(const  ::usarsim_inf::ToolType_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::usarsim_inf::ToolType_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::usarsim_inf::ToolType_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.type);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ToolType_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::usarsim_inf::ToolType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::usarsim_inf::ToolType_<ContainerAllocator> & v) 
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
  }
};


} // namespace message_operations
} // namespace ros

#endif // USARSIM_INF_MESSAGE_TOOLTYPE_H

